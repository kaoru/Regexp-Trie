NAME
    Regexp::Trie - builds trie-ized regexp

SYNOPSIS
      use Regexp::Trie;

      my $trie = Regexp::Trie->new;
      $trie->add($_) for (qw/foobar fooxar foozap fooza/);

      print $trie->regexp, "\n";
      # (?^:foo(?:bar|xar|zap?))
      # [ or (?-xism:foo(?:bar|xar|zap?)) before Perl 5.14 ]

      print $trie->regexp_string, "\n";
      # foo(?:bar|xar|zap?)

      print $trie->regexp_with_modifiers('i'), "\n";
      # (?^i:foo(?:bar|xar|zap?))
      # [ or (?i-xsm:foo(?:bar|xar|zap?)) before Perl 5.14 ]

DESCRIPTION
    This module is a faster but simpler version of Regexp::Assemble or
    Regexp::Optimizer. It builds a trie-ized regexp as above.

    This module is faster than Regexp::Assemble but you can only add
    literals. "a+b" is treated as "a\+b", not "more than one a's followed by
    b".

    I wrote this module because I needed something faster than
    Regexp::Assemble and Regexp::Optimizer. If you need more minute control,
    use those instead.

    To read more about tries see Trie on Wikipedia
    <http://en.wikipedia.org/wiki/Trie>

TIPS
    A good trick is to convert a big dictionary into a single regexp that
    can be later loaded as:

      my $rx = do 'dict.rx';

    See examples/dict/create_dictionary.pl and
    examples/dict/use_dictionary.pl for a fuller example.

  EXPORT
    None.

SEE ALSO
    Regexp::Optimizer, Regexp::Assemble, Regex::PreSuf

AUTHOR
    Original implementation - Dan Kogai, <dankogai@dan.co.jp>

    regexp_with_string, regexp_with_modifiers, more tests and updated
    documentation - Alex Balhatchet, <kaoru@slackwise.net>

COPYRIGHT AND LICENSE
    Copyright (C) 2006 by Dan Kogai

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.8.8 or, at
    your option, any later version of Perl 5 you may have available.

